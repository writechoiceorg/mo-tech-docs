openapi: 3.1.0
info:
  title: Lending - Products
  version: '2'
servers:
  - url: https://mo-services-zero-production.moprestamo.com/api/v2
components:
  securitySchemes:
    sec0:
      type: apiKey
      in: header
      name: X-API-KEY
    sec1:
      type: apiKey
      in: header
      name: X-AGGREGATOR-ID
security:
  - sec0: []
    sec1: []
paths:
  /products:
    get:
      summary: List Products
      description: Use the List Products endpoint to retrieve a list of all products.
      tags:
        - Products
      operationId: list-products
      parameters:
        - name: ordering
          in: query
          description: >-
            Use this query parameter to specify the order in which the results
            of a query should be returned. It is commonly used for sorting the
            data in ascending or descending order based on one or more fields.
            You can specify one or more fields by which the data should be
            ordered, along with the order direction (ascending or descending)
            using a comma-separated list. For example,
            `ordering=name,created_at` would  order the results first by the
            `name` field in ascending order and then by the `created_at` field
            in ascending order.
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Use this query parameter to specify the order in which the results
            of a query should be returned. It is commonly used for sorting the
            data in ascending or descending order based on one or more fields.
            You can specify one or more fields by which the data should be
            ordered, along with the order direction (ascending or descending)
            using a comma-separated list. For example,
            `ordering=name,created_at` would  order the results first by the
            `name` field in ascending order and then by the `created_at` field
            in ascending order.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: >-
            Use this query parameter in conjunction with the `limit` parameter
            for pagination. It specifies the starting point or offset within the
            dataset from which results should be returned. By setting the
            offset, you can navigate to different segments of the result set.
            For example, if you set `offset=20` and `limit=10`, you will receive
            results 21 to 30. It is often used to retrieve subsequent pages of
            results.
          schema:
            type: integer
            format: int32
        - name: x-api-key
          in: header
          description: >-
            Use the `x-api-key` header to include the API key generated
            previously for authentication purposes. The API key serves as a
            secret token that identifies the client or application making the
            request and is used to determine whether the client has the
            necessary permissions to access the requested resource.
          required: true
          schema:
            type: string
        - name: x-aggregator-id
          in: header
          description: >-
            Use the `x-aggregator-id` header to identify the aggregator for a
            particular request. An aggregator is the entity that is involved in
            the processing of transactions or data. By including the id in the
            header, the server can identify which aggregator the request owns
            and handle the request accordingly.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '200'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n  \"data\": [\n    {\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"name\": \"string\",\n      \"description\": \"string\",\n      \"status\": \"string\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"updated_at\": \"2019-08-24T14:15:22Z\"\n\t\t},\n    {\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"name\": \"string\",\n      \"description\": \"string\",\n      \"status\": \"string\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"updated_at\": \"2019-08-24T14:15:22Z\"\n    }\n  ],\n  \"errors\": null,\n  \"metadata\": {\n    \"timestamp\": \"2023-08-30T16:30:00Z\",\n    \"version\": \"2\",\n    \"page_size\": 5,\n    \"filtered\": 2,\n    \"total_pages\": 1,\n    \"count\": 2\n  }\n}"
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                        name:
                          type: string
                          example: string
                        description:
                          type: string
                          example: string
                        status:
                          type: string
                          example: string
                        created_at:
                          type: string
                          example: '2019-08-24T14:15:22Z'
                        updated_at:
                          type: string
                          example: '2019-08-24T14:15:22Z'
                  errors: {}
                  metadata:
                    type: object
                    properties:
                      timestamp:
                        type: string
                        example: '2023-08-30T16:30:00Z'
                      version:
                        type: string
                        example: '2'
                      page_size:
                        type: integer
                        example: 5
                        default: 0
                      filtered:
                        type: integer
                        example: 2
                        default: 0
                      total_pages:
                        type: integer
                        example: 1
                        default: 0
                      count:
                        type: integer
                        example: 2
                        default: 0
        '400':
          description: '400'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n\t\t\"data\": null,\n\t\t\"errors\": [\n\t\t\t\t{\n\t\t\t\t\t\t\"code\": \"XXXXXX\",\n\t\t\t\t\t\t\"description\": \"Description of error\",\n            \"detail\": {\n\t\t\t\t\t\t\t\t\"message\": \"Detail message of error\"\n\t\t\t\t\t\t},\n            \"name\": \"ERROR_NAME\"\n\t\t\t\t}\n\t\t],\n\t\t\"metadata\": {\n\t\t\t\t\"timestamp\": \"2023-11-27T15:04:00.033472Z\", \n\t\t\t\t\"version\": \"2\"\n\t\t}\n}"
              schema:
                type: object
                properties:
                  data: {}
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: XXXXXX
                        description:
                          type: string
                          example: Description of error
                        detail:
                          type: object
                          properties:
                            message:
                              type: string
                              example: Detail message of error
                        name:
                          type: string
                          example: ERROR_NAME
                  metadata:
                    type: object
                    properties:
                      timestamp:
                        type: string
                        example: '2023-11-27T15:04:00.033472Z'
                      version:
                        type: string
                        example: '2'
        '401':
          description: '401'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n\t\t\"data\": null,\n\t\t\"errors\": [\n\t\t\t\t{\n\t\t\t\t\t\t\"code\": \"XXXXXX\",\n\t\t\t\t\t\t\"description\": \"Description of error\",\n            \"detail\": {\n\t\t\t\t\t\t\t\t\"message\": \"Detail message of error\"\n\t\t\t\t\t\t},\n            \"name\": \"ERROR_NAME\"\n\t\t\t\t}\n\t\t],\n\t\t\"metadata\": {\n\t\t\t\t\"timestamp\": \"2023-11-27T15:04:00.033472Z\", \n\t\t\t\t\"version\": \"2\"\n\t\t}\n}"
              schema:
                type: object
                properties:
                  data: {}
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: XXXXXX
                        description:
                          type: string
                          example: Description of error
                        detail:
                          type: object
                          properties:
                            message:
                              type: string
                              example: Detail message of error
                        name:
                          type: string
                          example: ERROR_NAME
                  metadata:
                    type: object
                    properties:
                      timestamp:
                        type: string
                        example: '2023-11-27T15:04:00.033472Z'
                      version:
                        type: string
                        example: '2'
        '403':
          description: '403'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n\t\t\"data\": null,\n\t\t\"errors\": [\n\t\t\t\t{\n\t\t\t\t\t\t\"code\": \"XXXXXX\",\n\t\t\t\t\t\t\"description\": \"Description of error\",\n            \"detail\": {\n\t\t\t\t\t\t\t\t\"message\": \"Detail message of error\"\n\t\t\t\t\t\t},\n            \"name\": \"ERROR_NAME\"\n\t\t\t\t}\n\t\t],\n\t\t\"metadata\": {\n\t\t\t\t\"timestamp\": \"2023-11-27T15:04:00.033472Z\", \n\t\t\t\t\"version\": \"2\"\n\t\t}\n}"
              schema:
                type: object
                properties:
                  data: {}
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: XXXXXX
                        description:
                          type: string
                          example: Description of error
                        detail:
                          type: object
                          properties:
                            message:
                              type: string
                              example: Detail message of error
                        name:
                          type: string
                          example: ERROR_NAME
                  metadata:
                    type: object
                    properties:
                      timestamp:
                        type: string
                        example: '2023-11-27T15:04:00.033472Z'
                      version:
                        type: string
                        example: '2'
      deprecated: false
x-readme:
  headers: []
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
x-readme-fauxas: true